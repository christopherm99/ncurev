#!/usr/bin/env python3
import clang.cindex as ci

support = [
  ("NV0000_CTRL_CMD_GPU_ATTACH_IDS", "NV0000_CTRL_GPU_ATTACH_IDS_PARAMS"),
  ("NV0000_CTRL_CMD_GPU_GET_ID_INFO", "NV0000_CTRL_GPU_GET_ID_INFO_PARAMS"),
  ("NV0000_CTRL_CMD_GPU_GET_ATTACHED_IDS", "NV0000_CTRL_GPU_GET_ATTACHED_IDS_PARAMS"),
  ("NV0000_CTRL_CMD_GPU_GET_ID_INFO_V2", "NV0000_CTRL_GPU_GET_ID_INFO_V2_PARAMS"),
  ("NV0000_CTRL_CMD_GPU_GET_UUID_FROM_GPU_ID", "NV0000_CTRL_GPU_GET_UUID_FROM_GPU_ID_PARAMS"),
  ("NV0000_CTRL_CMD_GPU_GET_PROBED_IDS", "NV0000_CTRL_GPU_GET_PROBED_IDS_PARAMS"),
  ("NV0000_CTRL_CMD_GPU_GET_MEMOP_ENABLE", "NV0000_CTRL_GPU_GET_MEMOP_ENABLE_PARAMS"),
  ("NV0000_CTRL_CMD_CLIENT_GET_ADDR_SPACE_TYPE", "NV0000_CTRL_CLIENT_GET_ADDR_SPACE_TYPE_PARAMS"),
  ("NV0000_CTRL_CMD_CLIENT_SET_INHERITED_SHARE_POLICY", "NV0000_CTRL_CLIENT_SET_INHERITED_SHARE_POLICY_PARAMS"),
  ("NV0000_CTRL_CMD_SYNC_GPU_BOOST_GROUP_INFO", "NV0000_SYNC_GPU_BOOST_GROUP_INFO_PARAMS"),
  ("NV0000_CTRL_CMD_SYSTEM_GET_FEATURES", "NV0000_CTRL_SYSTEM_GET_FEATURES_PARAMS"),
  ("NV0000_CTRL_CMD_SYSTEM_GET_P2P_CAPS_MATRIX", "NV0000_CTRL_SYSTEM_GET_P2P_CAPS_MATRIX_PARAMS"),
  ("NV2080_CTRL_CMD_GR_GET_TPC_MASK", "NV2080_CTRL_GR_GET_TPC_MASK_PARAMS"),
  ("NV2080_CTRL_CMD_FB_GET_INFO_V2", "NV2080_CTRL_FB_GET_INFO_V2_PARAMS"),
  ("NV2080_CTRL_CMD_NVLINK_GET_NVLINK_STATUS", "NV2080_CTRL_CMD_NVLINK_GET_NVLINK_STATUS_PARAMS"),
  ("NV2080_CTRL_CMD_BUS_GET_INFO_V2", "NV2080_CTRL_BUS_GET_INFO_V2_PARAMS"),
  ("NV2080_CTRL_CMD_MC_GET_ARCH_INFO", "NV2080_CTRL_MC_GET_ARCH_INFO_PARAMS"),
  ("NV2080_CTRL_CMD_GR_GET_CTX_BUFFER_SIZE", "NV2080_CTRL_GR_GET_CTX_BUFFER_SIZE_PARAMS"),
  ("NV2080_CTRL_CMD_GPU_GET_GID_INFO", "NV2080_CTRL_GPU_GET_GID_INFO_PARAMS"),
  ("NV2080_CTRL_CMD_GSP_GET_FEATURES", "NV2080_CTRL_GSP_GET_FEATURES_PARAMS"),
  ("NV2080_CTRL_CMD_CE_GET_ALL_CAPS", "NV2080_CTRL_CE_GET_ALL_CAPS_PARAMS"),
  ("NV2080_CTRL_CMD_BUS_GET_C2C_INFO", "NV2080_CTRL_CMD_BUS_GET_C2C_INFO_PARAMS"),
  ("NV2080_CTRL_CMD_BUS_GET_PCIE_SUPPORTED_GPU_ATOMICS", "NV2080_CTRL_CMD_BUS_GET_PCIE_SUPPORTED_GPU_ATOMICS_PARAMS"),
  ("NV2080_CTRL_CMD_BUS_GET_PCI_BAR_INFO", "NV2080_CTRL_BUS_GET_PCI_BAR_INFO_PARAMS"),
  ("NV2080_CTRL_CMD_BUS_GET_PCI_INFO", "NV2080_CTRL_BUS_GET_PCI_INFO_PARAMS"),
  ("NV2080_CTRL_CMD_GR_GET_GPC_MASK", "NV2080_CTRL_GR_GET_GPC_MASK_PARAMS"),
  ("NV2080_CTRL_CMD_GR_GET_CAPS_V2", "NV2080_CTRL_GR_GET_CAPS_V2_PARAMS"),
  ("NV2080_CTRL_CMD_GR_GET_GLOBAL_SM_ORDER", "NV2080_CTRL_GR_GET_GLOBAL_SM_ORDER_PARAMS"),
  ("NV2080_CTRL_CMD_GR_GET_INFO", "NV2080_CTRL_GR_GET_INFO_PARAMS"),
  ("NV2080_CTRL_CMD_GPU_GET_ACTIVE_PARTITION_IDS", "NV2080_CTRL_GPU_GET_ACTIVE_PARTITION_IDS_PARAMS"),
  ("NV2080_CTRL_CMD_GPU_GET_ENGINES_V2", "NV2080_CTRL_GPU_GET_ENGINES_PARAMS"),
  ("NV2080_CTRL_CMD_GPU_QUERY_COMPUTE_MODE_RULES", "NV2080_CTRL_GPU_QUERY_COMPUTE_MODE_RULES_PARAMS"),
  ("NV2080_CTRL_CMD_GPU_GET_SIMULATION_INFO", "NV2080_CTRL_GPU_GET_SIMULATION_INFO_PARAMS"),
  ("NV2080_CTRL_CMD_GPU_GET_SHORT_NAME_STRING", "NV2080_CTRL_GPU_GET_SHORT_NAME_STRING_PARAMS"),
  ("NV2080_CTRL_CMD_GPU_GET_NAME_STRING", "NV2080_CTRL_GPU_GET_NAME_STRING_PARAMS"),
  ("NV2080_CTRL_GPU_GET_INFO_V2_PARAMS", "NV2080_CTRL_GPU_GET_INFO_V2_PARAMS"),
  ("NV2080_CTRL_CMD_GPU_GET_INFO_V2", "NV2080_CTRL_GPU_GET_INFO_V2_PARAMS"),
  ("NV2080_CTRL_CMD_PERF_BOOST", "NV2080_CTRL_PERF_BOOST_PARAMS"),
  ("NV2080_CTRL_CMD_GR_SET_CTXSW_PREEMPTION_MODE", "NV2080_CTRL_GR_SET_CTXSW_PREEMPTION_MODE_PARAMS"),
  ("NV0080_CTRL_CMD_FIFO_GET_CHANNELLIST", "NV0080_CTRL_FIFO_GET_CHANNELLIST_PARAMS"),
  ("NV0080_CTRL_CMD_HOST_GET_CAPS_V2", "NV0080_CTRL_HOST_GET_CAPS_V2_PARAMS"),
  ("NV0080_CTRL_CMD_FB_GET_CAPS_V2", "NV0080_CTRL_FB_GET_CAPS_V2_PARAMS"),
  ("NV0080_CTRL_CMD_GPU_GET_CLASSLIST_V2", "NV0080_CTRL_GPU_GET_CLASSLIST_V2_PARAMS"),
  ("NV0080_CTRL_CMD_GPU_GET_VIRTUALIZATION_MODE", "NV0080_CTRL_GPU_GET_VIRTUALIZATION_MODE_PARAMS"),
  ("NV0080_CTRL_CMD_GPU_GET_NUM_SUBDEVICES", "NV0080_CTRL_GPU_GET_NUM_SUBDEVICES_PARAMS"),
  ("NV0080_CTRL_CMD_PERF_CUDA_LIMIT_SET_CONTROL", "NV0080_CTRL_PERF_CUDA_LIMIT_CONTROL_PARAMS"),
  ("NV83DE_CTRL_CMD_DEBUG_SET_EXCEPTION_MASK", "NV83DE_CTRL_DEBUG_SET_EXCEPTION_MASK_PARAMS"),
  ("NVC36F_CTRL_GET_CLASS_ENGINEID", "NVC36F_CTRL_GET_CLASS_ENGINEID_PARAMS"),
  ("NVC36F_CTRL_CMD_GPFIFO_GET_WORK_SUBMIT_TOKEN", "NVC36F_CTRL_CMD_GPFIFO_GET_WORK_SUBMIT_TOKEN_PARAMS"),
  ("NV_CONF_COMPUTE_CTRL_CMD_SYSTEM_GET_CAPABILITIES", "NV_CONF_COMPUTE_CTRL_CMD_SYSTEM_GET_CAPABILITIES_PARAMS"),
  ("NVA06C_CTRL_CMD_GPFIFO_SCHEDULE", "NVA06C_CTRL_GPFIFO_SCHEDULE_PARAMS"),
  ("NVA06C_CTRL_CMD_SET_TIMESLICE", "NVA06C_CTRL_TIMESLICE_PARAMS"),
  # *** NCU related ***
  ("NV2080_CTRL_GPU_REG_OP", "NV2080_CTRL_GPU_REG_OP"),
  ("NVB0CC_CTRL_CMD_PMA_STREAM_UPDATE_GET_PUT", "NVB0CC_CTRL_PMA_STREAM_UPDATE_GET_PUT_PARAMS"),
  ("NVB0CC_CTRL_PMA_STREAM_HS_CREDITS_STATUS", "NVB0CC_CTRL_PMA_STREAM_HS_CREDITS_STATUS"),
  ("NVB0CC_CTRL_PMA_STREAM_HS_CREDITS_INFO", "NVB0CC_CTRL_PMA_STREAM_HS_CREDITS_INFO"),
  ("NVB0CC_CTRL_CMD_POWER_REQUEST_FEATURES", "NVB0CC_CTRL_POWER_REQUEST_FEATURES_PARAMS"),
  ("NVB0CC_CTRL_CMD_POWER_RELEASE_FEATURES", "NVB0CC_CTRL_POWER_REQUEST_FEATURES_PARAMS"),
  ("NVB0CC_CTRL_CMD_ALLOC_PMA_STREAM", "NVB0CC_CTRL_ALLOC_PMA_STREAM_PARAMS"),
  ("NVB0CC_CTRL_CMD_FREE_PMA_STREAM", "NVB0CC_CTRL_FREE_PMA_STREAM_PARAMS"),
  ("NVB0CC_CTRL_CMD_RESERVE_PM_AREA_SMPC", "NVB0CC_CTRL_RESERVE_PM_AREA_SMPC_PARAMS"),
  ("NVB0CC_CTRL_CMD_RESERVE_HWPM_LEGACY", "NVB0CC_CTRL_RESERVE_HWPM_LEGACY_PARAMS"),
  ("NVB0CC_CTRL_CMD_GET_TOTAL_HS_CREDITS", "NVB0CC_CTRL_GET_TOTAL_HS_CREDITS_PARAMS"),
]

enums = {
  ("NV2080_CTRL_GPU_REG_OP", "regOp"): { 0: "READ_32", 1: "WRITE_32", 2: "READ_64", 3: "WRITE_64", 4: "READ_08", 5: "WRITE_08" },
  ("NV2080_CTRL_GPU_REG_OP", "regType"): { 0x00: "GLOBAL", 0x01: "GR_CTX", 0x02: "GR_CTX_TPC", 0x04: "GR_CTX_SM", 0x08: "GR_CTX_CROP", 0x10: "GR_CTX_ZROP", 0x20: "FB", 0x40: "GR_CTX_QUAD", 0x80: "DEVICE" },
  ("NVB0CC_CTRL_PMA_STREAM_HS_CREDITS_STATUS", "status"): { 0: "OK", 1: "INVALID_CREDITS", 2: "INVALID_CHIPLET" },
  ("NVB0CC_CTRL_PMA_STREAM_HS_CREDITS_INFO", "chipletType"): { 0: "INVALID", 1: "FBP", 2: "GPC", 3: "SYS" },
}

flags = {
  ("NV2080_CTRL_GPU_REG_OP", "regStatus"): { 0x00: "SUCCESS", 0x01: "INVALID_OP", 0x02: "INVALID_TYPE", 0x04: "INVALID_OFFSET", 0x08: "UNSUPPORTED_OP", 0x10: "INVALID_MASK", 0x20: "NOACCESS" },
}

fmt_strs = {
  "NvHandle": "%x",
  "NvU32": "0x%x",
  "NvBool": "%d",
}

args = [
  "-Iopen-gpu-kernel-modules/src/common/sdk/nvidia/inc",
]

lookup = {}
def walk(node):
  if node.kind == ci.CursorKind.TYPEDEF_DECL: lookup[node.spelling] = node
  for n in node.get_children(): walk(n)

def write_enum(s, f, ll, field):
  def enum2str(x, opts):
    items = list(opts.items())
    if len(items) == 0: return '"<unknown>"'
    (k, v), t = items[0], dict(items[1:])
    return f'({x} == {k}) ? "{v}" : ({enum2str(x, t)})'
  f.write(f'  printf("%{ll}s: %s\\n", "{field}", {enum2str(f"p->{field}", enums[s, field])});\n')


def write_flag(s, f, ll, field):
  f.write(f'  printf("%{ll}s: ", "{field}");\n')
  f.write(f'  if (p->{field} == 0) puts("{flags[s, field][0]}");\n  else {{\n')
  for k,v in flags[s, field].items():
    if k != 0: f.write(f'    if (p->{field} & {k}) printf("{v} ");\n')
  f.write('    puts("");\n  }\n')

def write_field(s, f, field):
  ll = 30
  match field.kind:
    case ci.CursorKind.UNION_DECL: f.write(f'  printf("%{ll}s: <union>\\n", "{field.spelling}");\n')
    case ci.CursorKind.FIELD_DECL:
      typeref, is_array = None, False
      for n in field.get_children():
        if n.kind == ci.CursorKind.TYPE_REF: typeref = n.spelling
        if n.kind == ci.CursorKind.INTEGER_LITERAL: is_array = True
      if is_array: f.write(f'  printf("%{ll}s: <{typeref} is array>\\n", "{field.spelling}");\n')
      elif (s, field.spelling) in enums: write_enum(s, f, ll, field.spelling)
      elif (s, field.spelling) in flags: write_flag(s, f, ll, field.spelling)
      elif typeref in fmt_strs: f.write(f'  printf("%{ll}s: {fmt_strs[typeref]}\\n", "{field.spelling}", p->{field.spelling});\n')
      else: f.write(f'  printf("%{ll}s: <{typeref} not parsed>\\n", "{field.spelling}");\n')


if __name__ == "__main__":
  index = ci.Index.create()
  tu = index.parse("stub.c", args=args)
  walk(tu.cursor)
  with open("pprint.h", "w") as f:
    f.write("#pragma once\n\n")
    for n, t in support:
      f.write(f"static void pprint_{n}(void *_p) {{\n")
      f.write(f"  {t} *p = ({t} *)_p;\n")
      f.write(f"  printf(\"{n}\\n\");\n")
      for x in list(lookup[t].get_children())[0].get_children(): write_field(t, f, x)
      f.write("}\n\n")

